from .low_level import Message, MessageType
from .wrappers import MessageGenerator

class DBusNameFlags:
    allow_replacement: int = 1
    replace_existing: int = 2
    do_not_queue: int = 4

class DBus:
    def __init__(self, object_path: str = ..., bus_name: str = ...) -> None: ...
    def Hello(self) -> Message: ...
    def RequestName(self, name: str, flags: int = 0) -> Message: ...
    def ReleaseName(self, name: str) -> Message: ...
    def StartServiceByName(self, name: str) -> Message: ...
    def UpdateActivationEnvironment(self, env: str) -> Message: ...
    def NameHasOwner(self, name: str) -> Message: ...
    def ListNames(self) -> Message: ...
    def ListActivatableNames(self) -> Message: ...
    def AddMatch(self, rule: MatchRule | str) -> Message: ...
    def RemoveMatch(self, rule: MatchRule | str) -> Message: ...
    def GetNameOwner(self, name: str) -> Message: ...
    def ListQueuedOwners(self, name: str) -> Message: ...
    def GetConnectionUnixUser(self, name: str) -> Message: ...
    def GetConnectionUnixProcessID(self, name: str) -> Message: ...
    def GetAdtAuditSessionData(self, name: str) -> Message: ...
    def GetConnectionSELinuxSecurityContext(self, name: str) -> Message: ...
    def ReloadConfig(self) -> Message: ...
    def GetId(self) -> Message: ...
    def GetConnectionCredentials(self, name: str) -> Message: ...

message_bus: DBus

class Monitoring(MessageGenerator):
    def BecomeMonitor(self, rules: str) -> Message: ...

class Stats(MessageGenerator):
    def GetStats(self) -> Message: ...
    def GetConnectionStats(self) -> Message: ...
    def GetAllMatchRules(self) -> Message: ...

class MatchRule:
    def __init__(
        self,
        *,
        type: MessageType | None,
        sender: str | None,
        interface: str | None,
        member: str | None,
        path: str | None,
        path_namespace: str | None,
        destination: str | None,
        eavesdrop: bool = False,
    ) -> None: ...
    def serialise(self) -> str: ...
    def matches(self, msg: Message) -> bool: ...
